Useful MyHD 1.54 Driver Information (incomplete)
2003, Mike Bourgeous
-------------------------------
No warranty on accuracy or fitness for any purpose is made of this data.
This data is placed into the public domain with the exception that if this data is
used in any way, credit must be given to those who took the time to create it.

All numbers are in hexadecimal.

This file is a bunch of disorganized notes, many of which are probably useless.
-------------------------------

subtract from file offset to get memory offset: 10320

In SoftICE Win9x to break on WriteTL850Reg, use:
bpx mdp100+c126

or, in Win2k or Win9x after loading the symbols from the driver, use:
bpx WriteTL850Reg

MyHD osd memory sometimes 8351e000
MyHD osd memory sometimes 8361f000
bg palette entry offset 0x408 from start of OSD memory

Beginning of osd memory is the OSD color palette (32 bits per entry)

SoftICE Breakpoints:
mdp100+3fda	demux_init (uploads tsd microcode)
mdp100+c126	write register
mdp100+d996	do_i2cwrite
mdp100+1bb58	somewhere in dpcinthandler
mdp100+200e4	initmce
mdp100+2036e	loadmcmicrocode
mdp100+208d0	initmcetoc
mdp100+21614	write osd block
mdp100+216b7	write osd block just before call to WRITE_REGISTER_BUFFER_ULONG
mdp100+29fbe	initialize osd memory
mdp100+2a084	initialize osd memory just before call to MapToUserSpace
mdp100+2a0bc	initialize osd memory after sBoardInfo is filled in
mdp100+2adfe	create cursor
mdp100+2af18	set cursor position
mdp100+2af3e	show cursor
mdp100+2f088	philips tuner change channel
mdp100+2f1e2	philips 1236d change channel
mdp100+2f35c	temic 4040fi5 change channel
mdp100+30748	somewhere in isr_videosync_tv

Set a breakpoint in SetDpcClock some time
Set a breakpoint in cJanus::SetGPIO some time

In win2k card registers usually mapped to baab7000



cJanus class layout:
Use "e gpJanus+offset" to edit the cJanus class in SoftICE

cJanus+0 may be a struct tagContext?

cJanus+0b9c may be _last_p_picture_cnt

cJanus+10388 is a pointer to tagContext used in VpipIntHandler and elsewhere
	
	if [cJanus+10388]+284 == 0 then don't run VpipHandler

cJanus+10f94 is a pointer to some other structure

	[cJanus+10f94]+0 may be something to do with row count, probably rows per field for vpip
	[cJanus+10f94]+4 may be something to do with field count, probably fields per group for vpip

cJanus+10f98 set to 1 in cJanus::VpipHandler

cJanus+11010 is sys pll eq (?)

cJanus+15b58 is channel change semaphore

cJanus+16658 may be demux queue

cJanus+166b8 is initialization info
initialization info+0 is board type
board type is read from registry and/or read from card (see tl880kern.c)
mdp-110b board type is 4
mdp-100b board type is 3
mdp-100a board type is 2

cJanus+166d0 is input mode (enum cJanus::InputSource)

cJanus+1670c is moved into cJanus+1686c, then 186000 is added, 
		and stored in cJanus+16870.

cJanus+1673c is SDRAM type (see tl880init.c:init_sdram())

cJanus+16748 and cJanus+16841 appear to be bools related to input mode

cJanus+167d8 has something to do with ntsc audio and is set to 0x2800
cJanus+167dc has something to do with ntsc audio and is set to 0x1c00

cJanus+167e4 is NTSC input

cJanus+16814 is OSD context (48 bytes)

cJanus+1686c is memory length (or start address?)
cJanus+16870 is memory end address?

cJanus[16870]+cJanus[16874] is passed to clear_sdram with a size of 16MB

memory is 0x186000 bytes long?


definitely set a breakpoint in code that uses getSDRAMoffset (3a5e4)


struct tagContext
-----------------
dword[0264] may be horizontal resolution
dword[0268] may be vertical resolution
dword[026c] may be interlaced flag
dword[0284] == 0 then don't run VpipHandler
dword[034c] may be field order for non-DVD playback
dword[0350] may be repeat_first_field flag
dword[0370-037c] have something to do with caption buffers
dword[0bb0] may be current field


struct SOverlaySurface
----------------------
dword[0x6c] may be pointer to next surface in linked list


OSD FUNCTIONS
-------------
.text:0002dfc8 cJanus::InitOSDContext() - zeros out 12 (0xb) dwords at gpJanus+16814

.text:0002dfd8 cJanus::SaveOSDContext() - reads 12 registers (0x30/48 bytes)
		starting at 0x10080 ending at 0x100ac to gpJanus+16814..16840
		
.text:0002dffe cJanus::RestoreOSDContext() - writes 12 dwords from gpJanus+16814 onward
		to registers 0x10080 to 0x100ac
		
.text:000313a2 OSDProperty::GetProperty(struct _HW_STREAM_REQUEST_BLOCK *)
.text:00031472 OSDProperty::SetProperty(struct _HW_STREAM_REQUEST_BLOCK *)
.text:0003192a OSDProperty::NumProperties() - returns 0x15
.text:0003192e OSDProperty::PropertyList - returns KSPROPERTY_ITEM
		*OSDProperty::m_OSDPropItm (.text:00012d50)
.text:00031934 WriteOSDBlock(ulong, uchar*, ulong, ulong, ulong, int)
.text:0003a2de initializeOSDMemory(ulong, ulong)
.text:0003a430 deinitializeOSDMemory()
.text:0003a474 allocateOSDMemory_Aligned(ulong, enum EALIGN)
.text:0003a596 deallocateOSDMemory(ulong)

function CDMA::VopOn returns 1 if aux video is enabled (reg 10000 bit 4)


cJanus Functions
----------------
isr_VideoSync_Tv() - Interrupt service routine that swaps field buffers
NtscDpcEofService(tagContext *,int) - End of field interrupt service routine


cSemaphore Functions
--------------------
Wait() takes a 64-bit int
Signal() takes a long and a uint


Interrupt Functions
-------------------
TL850InterruptVectorString(uint) - Returns a string description of an ISR by #

Interrupt function pointers are stored in an array.

	Note: many of these may be wrong
	0x001: V_apu_iauwrp1
	0x002: V_apu_iauwrp0
	0x004: V_apu_capunf
	0x005: V_apu_capovf
	0x00a: V_apu_iauwrp2
	0x00f: V_apu_matconf_poc
	0x010: V_apu_matconf_cwp
	0x011: V_apu_matconf_prp
	0x014: V_apu_matconf_iar0
	0x015: V_apu_matconf_iar1
	0x01d: V_apu_iecfrm_192
	0x022: V_blt_late
	0x023: V_blt_chain_blt
	0x024: V_blt_end
	0x060: V_dpc_syncloss
	0x061: V_dpc_syncacq
	0x062: V_dpc_hsynccnt
	0x063: V_dpc_vsynccnt
	0x064: V_dpc_hvsynccnt
	0x065: V_dpc_eof0
	0x066: V_dpc_eof1
	0x067: V_dpc_displ
	0x068: V_dpc_mem_uf
	0x069: V_dpc_aux_uf
	0x06a: V_dpc_aux_of
	0x06b: V_dpc_idx_of
	0x080: V_vsc_ibuf_ov
	0x081: V_vsc_vline
	0x082: V_vsc_vblank0
	0x083: V_vsc_vblank1
	0x084: V_vsc_f0
	0x085: V_vsc_f1
	0x086: V_vsc_vbi
	0x0c0: V_mce_sync_done
	0x0c1: V_mce_vtoc_uf
	0x0c2: V_mce_vld_noslice_start
	0x0c3: V_mce_vld_err
	0x0c4: V_mce_rzq_run
	0x0c5: V_mce_mc_ieng_err
	0x0c6: V_mce_mc_ibuf_ov
	0x0c7: V_mce_toc_rdy
	0x0c8: V_mce_toc_flush_done
	0x0c9: V_mce_vld_rlfifo_udf
	0x0e0: V_vpip_done
	0x100: V_hpip_done
	0x123: V_mcu_slice_2manymb
	0x124: V_mcu_skpbafterinra
	0x128: V_mcu_noSSErr
	0x144: V_tsd_isq
	0x145: V_tsd_sync_acquired
	0x146: V_tsd_sync_lost
	0x147: V_tsd_error_packet
	0x148: V_tsd_packet_received
	0x14a: V_tsd_commands_executed
	0x14b: V_tsd_stc_alarm_clock
	0x14f: V_tsd_collision



