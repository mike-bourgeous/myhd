TL880 Register Map and Chip/Card Doc (incomplete and disorganized)
(c) 2003-2007, Mike Bourgeous
-------------------------------
No warranty on accuracy or fitness for any purpose is made of this data.
This data may be freely redistributed in any form so long as credit is given to
those who took the time to create it, and no misrepresentation is made
regarding the origin of this work and any derivatives, or the original purpose
of the creation of this document.  Copyright is retained by the author(s).

All numbers are in hexadecimal, except for bit descriptions (binary).
-------------------------------

Card Variants
-------------
It appears that the Janus used the VPX chip's GPIO pins to select inputs.
The MDP-120 and MDP-130 use the VPX chip's GPIO pins instead of the TL880's for
most functions, including enabling the external display.

Initialization
--------------
Immediately after the driver is loaded, numerous values (whose meaning is yet to be
ascertained) are written to registers 0x5c00-5d00 (see tl880init.c).  Then, at least
on the MDP-130, the audio registers in the 0x3000 range are written to. Immediately
following these writes, TL880 memory starting at offset 0x1000 and continuing to
offset 0x103C is set to 0xff.  Then, 3000 and 3004 are written with values.  Then,
some GPIO lines are changed (too few to be an I2C transaction).  Finally, some audio
registers are written again.

TL880 Memory
------------

The first 0x186000 bytes (1.5MB+24KB) of the memory region seem to be TL850Memory.
The next 0x1000000 bytes (16MB) seem to be OSD-available memory.

While tinkering around, I found that the two field buffers were at memory offsets
~0x408800 and ~0x587000.  This is not necessarily always the case.  This was after
loading some PCI traces.

Memory is usually written in big-endian format.  The macro __cpu_to_be32,
defined in asm/byteorder.h, is useful.

OSD Memory:

The OSD supports multiple pixel formats.  The MyHD software uses a paletted
format, frequently with 768x364 pixel images, for a total image length of
0x44400.  If pixel data is not properly converted to big-endian, the pixels in
an image will be shifted around.  OSD layers may not overlap.

In 32-bit formats, the pixel structure seems to be BGRA.  The alpha range is 0
to 0x7f.  Values for alpha above 0x7f are clamped.  Accessing the memory as
little-endian data would result in an ARGB pixel format.

	Register 10084 contains a 16-byte aligned offset in card memory.
When that offset contains appropriate data, the OSD is displayed.  See
registers 10080 to 100ac for more details on OSD registers.

Note: the following tables are in little-endian format.

value of register 1008c and first dword at location pointed to by 10084:
   (seems to store properties of the OSD source image - width, etc.)

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|000000nn|nnnnnnnn	Seems to control source image
						height or possibly pitch.  Or,
						this could be a bitfield for
						turning on/off various
						overlays?  Try playing with
						each hex digit.
	00000000|0000nnnn|nnnn0000|00000000	Seems to control the width of
						the displayed image - lower
						values crop the right part of
						the OSD image.  0x80 seems to
						be the full width of the
						screen, but this changes -
						possibly based on a scaling
						bit in another field.  Is this
						multiplied by 4 to get the
						number of pixels?
	00nnnnnn|nnnn0000|00000000|00000000	Seems to control the height of
						the displayed image - lower
						values crop the bottom part of
						the OSD image.  0x200 seems to
						be the full height of the
						screen.  Perhaps these values
						come from some other spot in
						the display list.

		   
second dword at location pointed to by 10084:

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0000nnnn	Values of 4, 8, and c seem to
						shift the source image.  When
						testing with data from the
						MyHD Windows driver, this
						adjusts the "phase" of the
						source image (0 is normal,
						values up to f progressively
						place part of the left side of
						the image on the right side of
						the screen).
	00000000|00000000|0nnnnnnn|nnnn0000	Shifts the destination image
						horizontally by n pixels -
						lowest bit is ignored, so only
						multiples of two pixels have
						any effect.
	00000000|nnnnnnnn|00000000|00000000	Shifts the destination image
						vertically by n pixels.
	0000nnnn|00000000|00000000|00000000	If not set to 7, changes to
						the OSD palette and some OSD
						parameters will not take
						effect immediately.
	
third dword at location pointed to by 10084:
   Seems to control the location and/or parameters of the source image,
   including pixel format.  The leftmost hex digit is set to b for paletted
   images (8-bit), 0 for rgba images (32-bit).  Other values have other
   effects.
   

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|nnnnnnnn|nnnnnnnn|nnnnnnnn	Memory offset of image
	0000nnnn|00000000|00000000|00000000	Pixel format
	10000000|00000000|00000000|00000000	Last display list entry

fourth dword at location pointed to by 10084:
   Seems to control other source image parameters, including width scaling

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0000nnnn	Palette location - multiplied
						by 0x100 to get memory offset
						(i.e. 25c5 becomes 25c500)
	0000nn00|00000000|00000000|00000000	Horizontal scaling.  Sometimes
						this must be set to a non-zero
						value to display an image on
						the OSD.  This is confusing.
						I like to set it to 01 binary
						(hex digit 4).  The standard
						value in the driver is 4.  If
						this is set to 11 (hex digit
						c), the OSD image is cropped.
	00nn0000|00000000|00000000|00000000	Vertical scaling.  A value of
						1 produces a normal image.
						The standard value in the
						driver is 1 (hex digit 1).



TL880 Registers
---------------
HIF 0-14 - Hardware interface

0	last queued interrupt type
4	interrupt type enable mask

Known interrupt types are in tl880kern.c: tl880_bh().
If a demux interrupt is received (interrupt type | 0x400), it is important to clear
that bit in the interrupt enable mask before leaving the interrupt handler, and
only reset the bit when the TSD has been dealt with; otherwise, it will continually
interrupt the processor, preventing anything else from happening.  Without any data
fed to the TSD, reading from register 27814 after the first TSD interrupt will 
cause it to stop interrupting.

8 is possibly interrupt type for 0xc (?)
c is some kind of interrupt mask

VSC 1000-1028

1000 used in SetVSCCtrl
     bit zero set to 1 in EnableVSC
     used in VBICaptureStream::OnSetState

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	VSC Enable (?) 0 in cJanus::StartNtsc->SetVSCCtrl
	00000000|00000000|00000000|00000010	0 in cJanus::StartNtsc->SetVSCCtrl
	00000000|00000000|00000000|00000100	0 in cJanus::StartNtsc->SetVSCCtrl
	00000000|00000000|00000000|00001000	0 in cJanus::StartNtsc->SetVSCCtrl
	00000000|00000000|00000000|00010000	1 in cJanus::StartNtsc->SetVSCCtrl
	00000000|00000000|00000000|00100000	0 in cJanus::StartNtsc->SetVSCCtrl
	00000000|00nnnnnn|nnnnnnnn|nn000000	0x64 in cJanus::StartNtsc->SetVSCCtrl

1008 is VSC interrupt mask
100c is last queued VSC interrupt

1010 is used in SetVSCMIF
     is used in cJanus::RotateVscCapFrame bits 0xb-0x8,0x3-0x0
     SetVSCMIF writes 1010 and then verifies with ReadTL850RegBits up to 5 times

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0000nnnn	0 in cJanus::StartNtsc->SetVSCMIF
	00000000|00000000|0000nnnn|00000000	1 in cJanus::StartNtsc->SetVSCMIF

1014 is written with 0x61777 in cJanus::StartNtsc
     is used in SetVSCScaler

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|0000nnnn|nnnnnnnn|nnnnnnnn	(arg4 << 13) / arg0 in SetVSCScaler (arg0=arg4=720 in cJanus::StartNtsc->SetVSCScaler)
	nnnnnnnn|00000000|00000000|00000000	0 in SetVSCScaler

1018 is written with 0x2d002d0 in cJanus::StartNtsc
     used in SetVSCScaler

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|000000nn|nnnnnnnn	arg0 in SetVSCScaler
	000000nn|nnnnnnnn|00000000|00000000	arg4 in SetVSCScaler

101c used in SetVSCVBI

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|000000nn|nnnnnnnn	arg0 in SetVSCVBI
	0000000n|nnnnnnnn|00000000|00000000	arg4 in SetVSCVBI

1020 used in SetVSCVBI

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|000000nn|nnnnnnnn	arg8 in SetVSCVBI
	0000000n|nnnnnnnn|00000000|00000000	argc in SetVSCVBI

1024 used in SetVSCVBI

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	000000nn|nnnnnnnn|nnnnnnnn|nnnnn000	arg10 in SetVSCVBI

1028 used in SetVSCVBI

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	000000nn|nnnnnnnn|nnnnnnnn|nnnnn000	arg10 in SetVSCVBI

APU (Audio Processing Unit) 3000-307c

3000 used in cJanus::InitNtscAudio
	set to 01050000 in MDP-130 init
     set to zero in cJanus::DisableAPU
     0x01050000 while watching NTSC over the air

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	0 in cJanus::InitNtscAudio
	00000000|00000000|00000000|00000010	0 in cJanus::InitNtscAudio
	00000000|00000000|00000000|00000100	0 in cJanus::InitNtscAudio
	00000000|00000000|00000000|000nn000	0 in cJanus::InitNtscAudio
	00000000|00000000|00000000|0nn00000	0 in cJanus::InitNtscAudio
	00000000|00000000|0000000n|n0000000	0 in cJanus::InitNtscAudio
	00000000|00000000|00000nn0|00000000	0 in cJanus::InitNtscAudio
	00000000|00000000|10000000|00000000	0 in cJanus::InitNtscAudio
	00000000|000000nn|00000000|00000000	!gMspI2sMaster in cJanus::InitNtscAudio
	00000000|0000nn00|00000000|00000000	!gMspI2sMaster in cJanus::InitNtscAudio
	00000000|00nn0000|00000000|00000000	0 in cJanus::InitNtscAudio
	00000000|nn000000|00000000|00000000	0 in cJanus::InitNtscAudio
	000000nn|00000000|00000000|00000000	1 in cJanus::InitNtscAudio
						controls the sample rate (when set to 0
						my receiver shows PCM 88, and DD audio
						plays at double speed.  Set to 1, DD
						audio plays normally.  Set to 2, DD is
						slowed down about 33%.  Set to 3, my
						receiver no longer locks onto audio)
						(setting the SampleClock GPIO lines to
						0x300 requires me to set this to 3)

3004 bit 2 -- stereo/mono NTSC audio
	Set to 0x00040001 and 0x00000001 in MDP-130 init
     set to zero in cJanus::InitNtscAudio
     set to zero in cJanus::DisableAPU
     0x387 while watching NTSC over the air.  Changing to 0x39C lowers the
     pitch without changing speed (as well as other variations on the lowest
     byte) - sounds pretty cool.  That's when using PC soundcard playback.
     Setting to 0x397 speeds up raw audio playback in Linux significantly,
     when using SPDIF output.

	0x00100001 when playing Dolby Digital audio

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	1 in cJanus::InitNtscAudio
	00000000|00000000|00000000|0nnnnnn0	3 in cJanus::InitNtscAudio
	00000000|00000000|00000000|10000000	1 in cJanus::InitNtscAudio
	00000000|00000000|00000001|00000000	1 in cJanus::InitNtscAudio
	00000000|00000000|00000nn0|00000000	1 in cJanus::InitNtscAudio

3008 used in cJanus::InitNtscAudio
     zero while watching NTSC over the air with Wave audio.  0xnn001029 with
     SPDIF audio and NTSC over the air.

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	1 in cJanus::InitNtscAudio
	00000000|00000000|00000000|000nn000	1 in cJanus::InitNtscAudio
	00000000|00000000|00000000|0nn00000	1 in cJanus::InitNtscAudio
	00000000|00000000|00000nnn|00000000	0 in cJanus::InitNtscAudio
	00000000|00000000|0nnn0000|00000000	1 in cJanus::InitNtscAudio

300c,3010 written with 0x3000000
	Very, very small chance that these are AES status bits.
	0x02000006 when Dolby Digital is playing back.

3014 is APU interrupt mask
3018 is last queued APU interrupt

3020 written with 0x1000 in cJanus::InitNtscAudio
     used in cJanus::NtscAudioDpc
	Sets the audio buffer reset point (buffer resets to here)

3024 written with 0x10fe0 in cJanus::InitNtscAudio
     used in cJanus::NtscAudioDpc
	Sets the audio buffer reset trigger (when buffer reaches here, it resets)

3028 is ntsc recording offset in sdram
     is used in cJanus::RotateVscCapFrame
     is used in cJanus::InitNtscAudio (0x1000 + gpJanus+167d8 myhd1.54)
     constantly changing while watching NTSC over the air
	Writing this with a value that is part of the displayed memory buffer causes
	the buffer to be overwritten.  This value should be between regs 3020 and 3024.
	This is the offset at which the incoming I2S data is written to SDRAM.

302c written with 0x1000 in cJanus::InitNtscAudio
     constantly changing while watching NTSC over the air
	This is the offset at which the audio data in SDRAM is being sent via SPDIF.

3030 written with 0x9000 in cJanus::InitNtscAudio
     used in cJanus::NtscAudioDpc

3034 APU_IAU_IBA_REG - written with _IAU_BASE
3038 APU_IAU_IRA_REG - written with _IAU_BASE + 0x77fc
303c APU_IAU_IEA_REG - written with _IAU_BASE
	_IAU_BASE is 0x7800 bytes memory allocated with yGetTL850Memory
	All zero when watching NTSC over the air

3040 written with 0x00001000 during MDP-130 init
3044 written with 0x00000ffc during MDP 130 init
3058 written with 0x00c30004 and 0x00c30008 and 0x00000008 during MDP-130 init
3048 written with 0x00001020 during MDP-130 init

304c-3054 appear to contain memory offsets.  When stuck in looping Dolby Digital audio,
	writing data to the value in 304c+4 bytes silenced the audio.

304c
	Start of Dolby Digital buffer in card memory

3050
	Playback position in buffer pointed to by 304c

3054
	End of Dolby Digital buffer in card memory

305c written with 0xc30000c3 in cJanus::InitNtscAudio, used in TL850Audio_SetCrossFade

3060-3068 written with 0x0 in cJanus::InitNtscAudio, used in TL850Audio_SetCrossFade

306c written with 0xc30000c3 in cJanus::InitNtscAudio, used in TL850Audio_SetCrossFade

3070-3078 written with 0x0 in cJanus::InitNtscAudio, used in TL850Audio_SetCrossFade

307c written with 0xc30000c3 in cJanus::InitNtscAudio, used in TL850Audio_SetCrossFade


BLT (Blitter?) 4000-405c

4010 is BLT interrupt mask

4014 is last queued BLT interrupt

5000 SysPllEq
	Set to 0x00C61920 in MDP-130 init.

5400 MifPllEq
	Set to 0x00C61920 in MDP-130 init.

5800 DPC PLL constant
	Last byte is usually b0, sometimes 80 (1080i) or f0 (480i).  Last
	byte doesn't seem to affect external video refresh rate.

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000xxx	Disables sync if set (must radically alter timing)
	00000000|00000000|00000000|00001000	Divide by two
	00000000|00000000|00000000|00nn0000	c - 0: off/double, 1/2: on, 3: half speed
	00000000|00000000|000nnnnn|00000000	b - 0: normal, 2: half, 6: quarter
						e: eighth, 1e: sixteenth (sometimes)
	000000nn|nnnnnnnn|00000000|00000000	a: base

5C00-5D00
	Written with various values during initialization (see tl880init.c).

MCE 6000-603c

6000,6004 used in cJanus::GetTocRdPtr, cJanus::ResetMce, cJanus::UpdateMce, cJanus::InitMce

6000 bit 0x0-0x0 written with 1 in cJanus::InitMceToc
     bits 0xa-0x9 and 0x8-0x8 written with write_regbits in UpdateMce
     written with 0xc000 (bits 0xe, 0xf) in cJanus::InitMce

6004 used in GetNextTocWord

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|nnnnnn00	Used in cJanus::GetNextTocWord (wait for 4)

6008 is MCE interrupt mask
600c is MCE interrupt type

6014 used in isr_StartCodeSearch, cJanus::SearchHdrWithPacing
     written with 3 in cJanus::isr_NonSlice_Tv

6018 is a bitfield used in cJanus::SearchHdrWithPacing

6024 used in InitVldShiftAmt
     bits 0x4-0x0 written with 0 in cJanus::InitMceToc

6028 used in GetNextTocWord (simply returns after status wait read(6028))

602c used in LoadQuantTable; write 0x400 then table values?

6030 written with values or'd together

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	tagContext[0xec]
	00000000|00000000|00000000|00000010	tagContext[0xe8]
	00000000|00000000|00000000|00000100	tagContext[0xe4]
	00000000|00000000|00000000|00001000	tagContext[0xdc]
	00000000|00000000|00000000|00nn0000	tagContext[0xd0]
	00000000|00000000|00000000|nn000000	tagContext[0xd4]
	00000000|00000000|00000nnn|00000000	tagContext[0x94]
	00000000|00000000|nnnnn000|00000000	tagContext[0xe0]
	00000000|0000nnnn|00000000|00000000	tagContext[0xcc]
	00000000|nnnn0000|00000000|00000000	tagContext[0xc8]
	0000nnnn|00000000|00000000|00000000	tagContext[0xc4]
	nnnn0000|00000000|00000000|00000000	tagContext[0xc0]

6034 used in cJanus::GetTocRdPtr, cJanus::ResetMce, cJanus::InitMceToc

6038 used in cJanus::ResetMce, cJanus::InitMceToc

603c used in cJanus::ChannelChangeStep2, cJanus::InitMceToc

VPIP 7000-7030

7000 used in cJanus::VpipSetting, cJanus::StartVpip

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|000000nn
	00000000|00000000|00000000|0000nn00
	00000000|00000000|00000000|00010000	1 in cJanus::VpipSetting
	00000000|00000000|00000000|00100000	0 in cJanus::VpipSetting
	00000000|00000000|00000000|01000000	0 in cJanus::VpipSetting
	00000000|00000000|00000000|10000000	0 in cJanus::VpipSetting
	00000000|00000000|0000nnnn|00000000	3 in cJanus::VpipSetting
	00000000|00000000|00nn0000|00000000
	00000000|00000000|01000000|00000000	1 or 0 in cJanus::VpipSetting
	00000000|00000000|01000000|00000000	1 or 0 in cJanus::VpipSetting
	00000000|00nnnnnn|00000000|00000000	3f in cJanus::VpipSetting, cJanus[10f94][d8] in cJanus::StartVpip
	00000000|01000000|00000000|00000000	0 in cJanus::VpipSetting, toggled in VpipHandler (field order/active field?)

7004 is VPIP interrupt mask
     bit zero set to 1 in cJanus::VpipSetting

7008 is VPIP interrupt type

700c is used in cJanus::DeinterlaceTop, cJanus::NtscDpcEofService, cJanus::VpipSetting,
     cJanus::UpdateVpipBufReg, cJanus::DeinterlaceBottom

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0000nnnn	tagContext[1d4] in cJanus::DeinterlaceTop
						tagContext[1d4] in cJanus::DeinterlaceBottom
	00000000|00000000|0000nnnn|00000000	tagContext[368] in cJanus::DeinterlaceTop
						tagContext[1d8] in cJanus::DeinterlaceBottom
	00000000|0000nnnn|00000000|00000000	tagContext[1bc] in cJanus::DeinterlaceTop
						tagContext[1c4] in cJanus::DeinterlaceBottom
	0000nnnn|00000000|00000000|00000000	tagContext[1c0] in cJanus::DeinterlaceTop
						tagContext[1c8] in cJanus::DeinterlaceBottom

7010 used in cJanus::VpipSetting

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|0000nnnn|nnnnn000	0 in cJanus::VpipSetting
	0000nnnn|nnnnn000|00000000|00000000	0 in cJanus::VpipSetting

7018 used in cJanus::VpipSetting

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|0000nnnn|nnnn0000

701c used in cJanus::StartVpip (cJanus[10f94][10])

7020 used in cJanus::VpipSetting

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|000000nn|nnnnnnnn	Vertical scaling ratio (1080/540 or /720)?
	00000000|000nnnnn|nnnnnn00|00000000
	nnnnnnnn|nnn00000|00000000|00000000

7024,7028 passed to cJanus::LoadFilterCoeffs in cJanus::VpipSetting

702c used in cJanus::StartVpip(2)
     always seems to be written first or'd with 0x80000000 (bit 0x1f), then without

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|0nnnnnnn|nnnn0000|00000000
	10000000|00000000|00000000|00000000

HPIP 8000-8024

8000 bit zero - start/stop HPIP
     used in cJanus::HpipSetting

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	HPIP enable
	00000000|00000000|00000000|00000010	0 in cJanus::HpipSetting
	00000000|00000000|00000000|00000100	0 in cJanus::HpipSetting

8008 is HPIP interrupt mask
800c is HPIP interrupt type

8010 HpipBufReg(?)
     used in cJanus::HpipSetting

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0000nnnn	tagContext[0x1a4]
	00000000|00000000|000nnnnn|00000000	tagContext[0x1a8]

8014 used in cJanus::HpipSetting

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0nnnnnnn	tagContext[0x254]/16
	00000000|00000000|0nnnnnnn|00000000
	00000000|0nnnnnnn|00000000|00000000
	0nnnnnnn|00000000|00000000|00000000	

8018 used in cJanus::HpipSetting

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0nnnnnnn	tagContext[0x254]+15/16 or +31/32

801c used in cJanus::HpipSetting

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|000000nn|nnnnnnnn
	00000000|000nnnnn|nnnnnn00|00000000
	nnnnnnnn|nnn00000|00000000|00000000

8020,8024 passed to cJanus::LoadFilterCoeffs in cJanus::HpipSetting


DPC 10000-10200

10000 is display options bitfield:

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	Top/bottom field or top/bottom buffer
	00000000|00000000|00000000|00000010	Image display enable (BVDO)
	00000000|00000000|00000000|00000100	OSD display enable
	00000000|00000000|00000000|00001000	Cursor display enable
	00000000|00000000|00000000|00010000	Aux (i.e. video card overlay) enable
	00000000|00000000|00000000|00100000	Sync enable/external display enable (not sure)
	00000000|00000000|00000000|01000000	This does something to the color.
	00000000|00000000|00000001|00000000	Color bars
	00000000|00000000|00000100|00000000	Y'PbPr color (needs other settings too)

10004 is display status bitfield:

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000100	Used in cJanus::isr_VideoSync(_Dvd)
	0nnnnnnn|nnnn0000|00000000|00000000	Used in cJanus::WaitForActiveRegion

10008 DPC interrupt mask bitfield
1000C DPC interrupt type bitfield

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000100 	isr_VideoSync (unknown function - perhaps analog input's sync)
	00000000|00000000|00000000|00100000	IntDpcEof0 (Vertical sync - top field)
	00000000|00000000|00000000|01000000	IntDpcEof1 (Vertical sync - bottom field)
	00000000|00000000|00000010|00000000	Horizontal sync interrupt ? (very fast)

	bit 9 may be preview client/aux video?
	bit 0xa may be capture client/aux video?

10014-10028: Sync registers: see tools/dpc/dpcaux.c

10014 DPC sync register 1

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	A
	00000000|00000000|00000000|00000010	B
	00000000|00000000|00000000|00000100	C
	00000000|00000000|00000000|00001000	D - Progressive Scan
	00000000|00000000|nnnnnnnn|nn000000	E
	00000nnn|nnnnnnnn|00000000|00000000	F - Horizontal Size
	00001000|00000000|00000000|00000000	G
	00010000|00000000|00000000|00000000	H
	00100000|00000000|00000000|00000000	I
	01000000|00000000|00000000|00000000	J
	
10018 DPC sync register 2

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|0000000n|nnnnnnnn	K - Horizontal Back Porch
	00000000|00000000|00000010|00000000	L - Invert Hsync
	00000000|00000000|00000100|00000000	M - Invert Vsync
	00000000|00000nnn|nnnn0000|00000000	N - Horizontal Sync Length
	000nnnnn|nnnn0000|00000000|00000000	O - Horizontal Front Porch

1001c DPC sync register 3 (top field, progressive scan)

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000nnn	P - Vertical Sync Length 1
	00000000|00000000|0000nnnn|nnnn0000	Q - Vertical Front Porch 1
	00000000|0nnnnnnn|nnnn0000|00000000	R - Vertical Size 1
	0000nnnn|00000000|00000000|00000000	S - Vertical Back Porch 1
	00010000|00000000|00000000|00000000	T - NTSC? 1

10020 DPC sync register 4 (bottom field)

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000nnn	U - Vertical Sync Length 2
	00000000|00000000|0000nnnn|nnnn0000	V - Vertical Front Porch 2
	00000000|0nnnnnnn|nnnn0000|00000000	W - Vertical Size 2
	0000nnnn|00000000|00000000|00000000	X - Vertical Back Porch 2

10024 DPC sync register 6

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00nnnnnn|nnnnnnnn|nnnnnnnn	Y
	00000001|00000000|00000000|00000000	Z
	nnnn0000|00000000|00000000|00000000	AA

10028 DPC sync register 5

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|0000nnnn|nnnnnnnn	BB
	00000001|00000000|00000000|00000000	CC

  0x5800 is DD

10040 bottom two bits used in DoProgressiveFrame as a bitfield, maybe some
      kind of register selection for 10068,1006c
      used in cJanus::isr_NonSlice_Tv
      controls image format

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|000000nn
	00000000|00000000|00000000|00000001	Halves vertical image size (scale)
	00000000|00000000|00000000|00000010	Halves vertical image size (crop)
	00000000|00000000|00000000|00100000	1 in cJanus::isr_NonSlice_Tv
	00000000|00000000|00nn0000|00000000	Repeats the left side of the image 
						multiple times across the screen
	
10044 is YUV color value used as background for video.

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|nnnnnnnn|00000000|00000000	Y
	00000000|00000000|nnnnnnnn|00000000	Pb
	00000000|00000000|00000000|nnnnnnnn	Pr

10048 is DispBufReg(?) or NtscDispFrame?
      bits 0x1e-0x14,0x11-0x8,0x7-0x4,0x3-0x0 used in cJanus::RotateNtscDispFrame
	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0000nnnn
	00000000|00000000|00000000|nnnn0000
	00000000|000000nn|nnnnnnnn|00000000
	0nnnnnnn|nnnn0000|00000000|00000000

Values in 1004c-10054 are relative to the external display resolution, and affect both overlay
and external display.

1004c Controls the amount of the image that is decoded - the rest is replaced with repeated pixels
	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|0000nnnn|nnnnnnnn	Video image width on display
	0000nnnn|nnnnnnnn|00000000|00000000	Video image height on display

10050, 10054 read in CreateAddSurface

10050 Positions video
	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|0000nnnn	Video image byte offset in memory
	00000000|0000nnnn|nnnnnnnn|00000000	Video image x offset on display (last bit ignored)
	nnnnnnnn|nnnn0000|00000000|00000000	Video image y offset on display

10054 Crops video (does not scale)
	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|0000nnnn|nnnnnnnn	Video image width on display
	0000nnnn|nnnnnnnn|00000000|00000000	Video image height on display

10068,1006c used in DoProgressiveFrame with g_vsCtlReg

10070 used at end of DoProgressiveFrame

registers 10080 to 100AC are the OSD context

register 10080 changes palettes(?)
register 10084 changes OSD image(?) - something like "sdram offset" - used in
	overlay display lists - written with return value of getSDRAMoffset in
	in showOverlays - card ignores lowest four bits

registers 1008c and 10090 seem to take turns being zero and some value
	example: 1008c = eb848609 when 10090 = 0,
		 1008c = 0 when 10090 = 014e0882
		 when eb848609 is stored in bigendian format at the
		 offset in card memory pointed to by register 10084
		 writing to that offset causes the displayed osd image
		 to stretch or shrink
		 

10094 used in showOverlays

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|nnnnnnnn|00000000	0x80 in showOverlays - overlay
						brightness.  0x80 is standard.
						0x00 is nearly black; 0xff is
						like a TV with the brightness
						turned up almost all the way
						(it doesn't wash out to white,
						though).
	nnnn0000|00000000|00000000|00000000	So far it seems that any value
						here turns the image white if
						it is a paletted image.

Aux Scaler: 100c0-100d8
	The scaler seems to take a serial video stream and just pick out the pixels it wants.

100c0, 100cc, 100d4, 100d8 - auxSetVertScaler

100c0 may be a DMA control register - bit 5 is DMA enable/disable? (must be on for VGA overlay to display)
	bit 2: used in JanusProperty::SetProperty near a reference to g_auxCompVideo
	bit 5: CDma::DisableDmaHW (set to 0), CDma::DmaRelatedHWSettings (set to 1)

100c4 - auxSetPictureOrigion

	00000nnn - horizontal input offset
	0nnn0000 - vertical input offset

100c8, 100d0 - auxSetHrzScaler

100c8
	Normally 40080 when watching 720 .tp
	Changing the last digit really screws up the video ("horizontal hold")
	Changing the 4 to a 0 seems to have no effect.
	Changing to 40000 makes the VGA overlay about 150% its normal width (cropping right side of image)
	Changing to 40008 makes the VGA overlay show 256 images (16x16)
	Changing to 40010 makes the VGA overlay show 64 images (8x8)
	Changing to 40020 makes the VGA overlay show 16 images (4x4)
	Changing to 40040 makes the VGA overlay show 4 images (2x2)
	Changing to 400f0 skews the VGA overlay video diagonally

100cc	
	000000nn hex - vertical size (unknown units) 0x78 (120) when watching 720p video on VGA overlay
	nnnnnn00 hex - when set to all f's, minimally increases vertical size of video.

100d4
	value doesn't seem to affect video when watching 720p .tp video on 60frames/s VGA overlay

100d8
	20B0A107 while watching 720p .tp on VGA overlay
	Value doesn't seem to affect video in this situation, except for the 2, which must be set.
	Setting to 20000000 leaves video intact.  Setting to 10000000 causes VGA overlay to divide in half
	vertically, showing two copies of the image.

10100 used in showCursor

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	000000nn|nnnnnnnn|nnnnnnnn|nnnn0000

10104 used in setCursorPosition

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000nnn|nnnnnnnn	Axis 1 (X?)
	00000nnn|nnnnnnnn|00000000|00000000	Axis 2 (Y?)

10108 used in showCursor

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|nnnnnnnn
	00000000|nnnnnnnn|00000000|00000000
	000000nn|00000000|00000000|00000000
	

Registers 10140-1017c are written with Y'PbPr values in OSDProperty::SetProperty
	These control the color palette used for the cursor.

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|nnnnnnnn	Pb (blue axis chroma) (0-0xff)
	00000000|00000000|nnnnnnnn|00000000	Pr (red axis chroma) (0-0xff)
	00000000|nnnnnnnn|00000000|00000000	Y (luma) (0-0xff)
	0nnnnnnn|00000000|00000000|00000000	Alpha (0-0x7f)

DPC2 10180-10184 (indexed registers)
10180 selects the DPC2 register, 10184 is the register's content.  Reading from
or writing to 10184 increments 10180.  It appears that there are 0x400 registers
total.
	
	10180 | 10184  | Desc
	------+--------+-----------
	0     |testregs|Used in cJanus::dpc2_registers (CLUT = color look-up table?)
	------+--------+-----------
	104   |testregs|Used in cJanus::dpc2_registers
	------+--------+-----------
	200   |f7fafcff|Used in cJanus::InitDisplay
	      |fcf6f4f4|
	      |402a1807|
	      |7e766855|
	      |f7fafcff|
	      |fcf6f4f4|
	      |402a1807|
	      |7e766855|
	------+--------+-----------
	200   |testregs|Used in cJanus::dpc2_registers
	------+--------+-----------
	210   |38281808|Used in cJanus::InitDisplay
	      |78685848|
	      |48586878|
	      |08182838|  First four rows seem to affect rows of luma
	      |38281808|  Next four rows seem to affect rows of chroma
	      |78685848|
	      |48586878|
	      |08182838|
	------+--------+-----------
	210   |3c241204|Used in cJanus::InitDisplay
	      |fbf6f5f1|
	      |53677881|
	      |81786753|
	      |3c241204|
	      |fbf6f5f1|
	      |53677881|
	      |81786753|
	------+--------+-----------
	300 to|ccmatrix|Used in cJanus::SetColorConversionMatrix 
	308   |        |(changing these will change display colors)
	      |        |
	      |        |Applies to OSD, cursor, and video.
	------+--------+-----------
	300   |testregs|Used in cJanus::dpc2_registers
	------+--------+-----------
	10000 |not used|Used in cJanus::DisplayColorBars
	------+--------+-----------

MyHD MDP-110: to turn on external display:

register	sync value	dump value
--------	----------	----------
10190		0x00000400	0x0cffffff
10194		0x00000400	0x000eff00
10198		0x00000400	0x000e5d00

MDP-120 and MDP-130 use VPX GPIOs.  Use set_gpio function.

10190	GPIO enable
10194	GPIO output enable
10198	GPIO output	i2c output
1019C	GPIO input	i2c input (see i2c.txt)


10198 used in GPIO, I2C, cNxtVSB::NxtCheckChannel

bit 0x13 is set to zero then one to reset the Nxt2000 in NxtCheckChannel


	         MyHD MDP-110 GPIO
		 -----------------
	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000100|00000000	Video passthrough
	00000000|00000001|00000000|00000000	SDA Read 1
	00000000|00000010|00000000|00000000	SDA Write 1
	00000000|00000100|00000000|00000000	SCL Write 1, SCL Read 1
	00000000|00001000|00000000|00000000	cNxtVsb::NxtCheckChannel
	00000000|01000000|00000000|00000000	SDA Write 2, SDA Read 2
	00000000|10000000|00000000|00000000	SCL Write 2, SCL Read 2
	00000100|00000000|00000000|00000000	SCL Write 0, SCL Read 0
	00001000|00000000|00000000|00000000	SDA Write 0, SDA Read 0
	

GPIO also controls sampling clock
SetGPIO used in (MyHD):
	DebugProperty::SetProperty (line 2)
	cJanus::SetDpcClock (line 6)
	SetSamplingClock (line 9 or line 8) - 0x300 hex is the mask
	cJanus::BoardInitialize (line 0 and line 6, line 5)
	JanusProperty::SetProperty (line 2)
	cJanus::SetVIP (line 4, line 3)
	cNxtVSB::NxtCheckChannel (line 0) - "Resetting Chips" - 0 then 1

ReadGPIO used in (MyHD):
	JanusPropety::GetProperty (line 2)

Zeros for bi-level (VGA) sync, something else for tri-level sync:
101a0 - affects sync directly
101a4
101a8

18000 mcu firmware start
1c000 mcu data start

1c2c0-1c2cc, 1c2d4-1c2ec used in UpdateMce

1c2f0 bit zero - startmcu

1c2f4 MCU interrupt mask

1c2fc-1c300 used in UpdateMce

1c304 is interrupt mask of some type (?)

1d800,1d804 used in cJanus::RestartMce, cJanus::UpdateMce, cJanus::ResetMcu

1d810 is MCU status (?)

20000 tsd firmware start
	Reading from any register in this range causes video glitches, and
	possible system restart

24000-25800 used in demux_init

24040 used in Demux_tsdStart/Stop

24048 is an interrupt mask of some type, maybe TSD (?)

24060-24078 used in Demux_UpdatePCR

240a4 used in Demux_commandTableWrite

24568 is returned directly in GetVideoPid

247e8 plus some offset is used in SetChannelWritePtr

247f0 plus some offset is used in SetTransportCaptureBuffer

24be8 plus some offset is used in SetPesChannelWritePtr

24d68.. used in InitPSI

25718-25728,25750,25754 used in _auxLdDscMbox (called in VopLoadDescriptor)
	This function is related to DMA.

25718 	High-order DMA memory offset

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|nnnnnnnn|nnnnnnnn	Upper two bytes of DMA physical memory offset

2571c 	Low-order DMA memory offset

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|nnnnnnnn|nnnnnnnn	Lower two bytes of DMA physical memory offset

25728 is auxTstDscrMboxEmpty

2573c is auxTstCurLineCnt

25740 used in _auxEnable/DisableDscInt, may be an interrupt mask - also related to Aux DMA

25744 used in auxSetAuxReset

25768-257e8 Demux command table?

26800 and 26804 used in Demux_stop and demux_init

27804,27808 used in Demux_GetSTC (([27804] >> 0xf) | ([27808] << 0x11))
            probably read-only

27810 written with _setValue in Demux_UpdatePCR
      written with 0xa000 in cJanus::SetNtscAudioClock
      Changing the value changes the rate of audio capture from the MSP, possibly also
      some other I2S parameters.  A value of 0 is very fast.  Only the lower two bytes
      are updated when this register is written.  A value of 8b00 is very slow. f000 is
      fast.  Going from 8a00 to 8c00 seems to reverse the direction of the odd noise.
	

27814 last queued tsd interrupt

MIF 28000, 28020-280dc - Memory interface

28000
	Set to 34302130 at beginning of init process. ('40!0' in ascii?)

28040-2807c used in cJanus::PipMifBufSetting

280dc written with 0x31415926 in cJanus::RestartMce ('1AY&' in ascii?)


Some of the values sometimes written to a few registers:
00000004 0000009B
00001010 00000100
00001010 00000102
00001010 00000302
00001010 00000304
00001010 00000504
00001010 00000506
00001010 00000700
00001010 00000706
00007000 00000015
00007000 007DE310
0000700C 09080700
0000701C 00000090
0000701C 00000092
0000701C 03E07C90
0000701C 03E07C92
0000701C 07C0F892
0000701C 0F81F090
0000701C 0F81F092
0000702C 00000000
0000702C 80000000
00010000 00000032
00010000 00000033
00010048 00C00098
00010048 00C000BA
00025718 00001F54
0002571C 0000A280
00025720 0000A000
00025724 0000A000
00025728 0000000C
00025758 0000FF14


The OSD addresses all get OR'd with 0x52300000.


