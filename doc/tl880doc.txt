TL880 Register Map and Chip/Card Doc (incomplete and disorganized)
2003, Mike Bourgeous
-------------------------------
No warranty on accuracy or fitness for any purpose is made of this data.
This data is placed into the public domain with the exception that if this data is
used in any way, credit must be given to those who took the time to create it.

All numbers are in hexadecimal, except for bit descriptions (binary).
-------------------------------

HIF 0-14

0	last queued interrupt type
4	interrupt type enable mask

Known interrupt types are in tl880kern.c: tl880_bh().
If a demux interrupt is received (interrupt type | 0x400), it is important to clear
that bit in the interrupt enable mask before leaving the interrupt handler, and
only reset the bit when the TSD has been dealt with; otherwise, it will continually
interrupt the processor, preventing anything else from happening.  Without any data
fed to the TSD, reading from register 27814 after the first TSD interrupt will 
cause it to stop interrupting.

8 is possibly interrupt type for 0xc (?)
c is some kind of interrupt mask

VSC 1000-1028

1008 is VSC interrupt mask
100c is last queued VSC interrupt

APU (Audio Processing Unit) 3000-307c

3004 bit 2 -- stereo/mono NTSC audio

3014 is APU interrupt mask
3018 is last queued APU interrupt

3028 may be ntsc recording offset in sdram

3034 APU_IAU_IBA_REG - written with _IAU_BASE
3038 APU_IAU_IRA_REG - written with _IAU_BASE + 0x77fc
303c APU_IAU_IEA_REG - written with _IAU_BASE
	_IAU_BASE is 0x7800 bytes memory allocated with yGetTL850Memory

BLT (Blitter?) 4000-405c

4010 is BLT interrupt mask

4014 is last queued BLT interrupt

5000 SysPllEq

5400 MifPllEq

5800 DPC PLL constant

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000xxx	Disable sync if set(?)
	00000000|00000000|00000000|00001000	Divide by two?
	00000000|00000000|00000000|00nn0000	c - 0: off/double, 1/2: on, 3: half speed
	00000000|00000000|000nnnnn|00000000	b - 0: normal, 2: half, 6: quarter
						e: eighth, 1e: sixteenth (sometimes)
	000000nn|nnnnnnnn|00000000|00000000	a: base

MCE 6000-603c

6000,6004 used in cJanus::GetTocRdPtr, cJanus::ResetMce

6008 is MCE interrupt mask
600c is MCE interrupt type

6014 used in isr_StartCodeSearch, cJanus::SearchHdrWithPacing

6018 is a bitfield used in cJanus::SearchHdrWithPacing

6024 used in InitVldShiftAmt

6034 used in cJanus::GetTocRdPtr, cJanus::ResetMce

6038 used in cJanus::ResetMce

603c used in cJanus::ChannelChangeStep2

VPIP 7000-7030

7004 is VPIP interrupt mask
7008 is VPIP interrupt type

700c is used in DeinterlaceTop

HPIP 8000-8020

8000 bit zero - start/stop HPIP

8008 is HPIP interrupt mask
800c is HPIP interrupt type

8010 HpipBufReg(?)

register 10000 is display options bitfield:

	fedcba98 76543210
	00000000 00000001	Top/bottom field or top/bottom buffer
	00000000 00000010	Image display enable (BVDO)
	00000000 00000100	OSD display enable
	00000000 00001000	Cursor display enable(?)
	00000000 00010000	Aux (i.e. video card overlay) enable
	00000000 00100000	Sync enable/external display enable (not sure)
	00000000 01000000	This does something to the color.
	00000001 00000000	Color bars
	00000100 00000000	Y'PbPr color

register 10004 is a status register for the video generator (?)

10008 DPC interrupt mask bitfield
1000C DPC interrupt type bitfield

	00000100 isr_VideoSync (vertical retrace?)
	00100000 IntDpcEof0 (end of top field?)
	01000000 IntDpcEof1 (end of bottom field?)

	bit 9 may be preview client/aux video?
	bit 0xa may be capture client/aux video?

10014-10028: Sync registers: see tools/dpc/dpcaux.c

10014 DPC sync register 1

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000001	A
	00000000|00000000|00000000|00000010	B
	00000000|00000000|00000000|00000100	C
	00000000|00000000|00000000|00001000	D - Progressive Scan
	00000000|00000000|nnnnnnnn|nn000000	E
	00000nnn|nnnnnnnn|00000000|00000000	F - Horizontal Size
	00001000|00000000|00000000|00000000	G
	00010000|00000000|00000000|00000000	H
	00100000|00000000|00000000|00000000	I
	01000000|00000000|00000000|00000000	J
	
10018 DPC sync register 2

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|0000000n|nnnnnnnn	K - Horizontal Back Porch
	00000000|00000000|00000010|00000000	L - Invert Hsync
	00000000|00000000|00000100|00000000	M - Invert Vsync
	00000000|00000nnn|nnnn0000|00000000	N - Horizontal Sync Length
	000nnnnn|nnnn0000|00000000|00000000	O - Horizontal Front Porch

1001c DPC sync register 3 (top field, progressive scan)

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000nnn	P - Vertical Sync Length 1
	00000000|00000000|0000nnnn|nnnn0000	Q - Vertical Front Porch 1
	00000000|0nnnnnnn|nnnn0000|00000000	R - Vertical Size 1
	0000nnnn|00000000|00000000|00000000	S - Vertical Back Porch 1
	00010000|00000000|00000000|00000000	T - 1

10020 DPC sync register 4 (bottom field)

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|00000000|00000nnn	U - Vertical Sync Length 2
	00000000|00000000|0000nnnn|nnnn0000	V - Vertical Front Porch 2
	00000000|0nnnnnnn|nnnn0000|00000000	W - Vertical Size 2
	0000nnnn|00000000|00000000|00000000	X - Vertical Back Porch 2

10024 DPC sync register 6

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00nnnnnn|nnnnnnnn|nnnnnnnn	Y
	00000001|00000000|00000000|00000000	Z
	nnnn0000|00000000|00000000|00000000	AA

10028 DPC sync register 5

	11111111|11111111|00000000|00000000
	fedcba98|76543210|fedcba98|76543210
	--------+--------+--------+--------
	00000000|00000000|0000nnnn|nnnnnnnn	BB
	00000001|00000000|00000000|00000000	CC

  0x5800 is DD

10040 bottom two bits used in DoProgressiveFrame as a bitfield, apparently some
kind of register selection for 10068,1006c

register 10048 is DispBufReg(?) or NtscDispFrame?

10068,1006c used in DoProgressiveFrame with g_vsCtlReg

10070 used at end of DoProgressiveFrame

register 10080 to 100AC are the OSD context

register 10080 changes palettes(?)
register 10084 changes OSD image(?) - something like "sdram offset" - used in
	overlay display lists

100c0 
	bit 2: used in JanusProperty::SetProperty near a reference to g_auxCompVideo
	bit 5: CDma::DisableDmaHW (set to 0), CDma::DmaRelatedHWSettings (set to 1)

100c0, 100cc, 100d4, 100d8 - auxSetVertScaler

100c4 - auxSetPictureOrigin

100c8, 100d0 - auxSetHrzScaler



DPC2 10180-10184
10180 and 10184 do some weird stuff..  10180 seems to possibly be a register 
select/status, and 10184 is register/status content.

MyHD: to turn on external display:

register	sync value	dump value
--------	----------	----------
10190		0x00000400	0x0cffffff
10194		0x00000400	0x000eff00
10198		0x00000400	0x000e5d00

10190	GPIO enable
10194	GPIO output enable
10198	GPIO output	i2c output
1019C	GPIO input	i2c input (see i2c.txt)

Registers 10180-101a0 are written with YPbPr values in OSDProperty::SetProperty

Zeros for bi-level (VGA) sync, something else for tri-level sync:
101a0
101a4
101a8

18000 mcu firmware start
1c000 mcu data start

1c2f0 bit zero - startmcu

1c2f4 MCU interrupt mask

1c304 is interrupt mask of some type (?)

1d800,1d804 used in cJanus::RestartMce, cJanus::ResetMcu

1d810 is MCU status (?)

20000 tsd firmware start

24000-25800 used in demux_init

24040 used in Demux_tsdStart/Stop

24048 is an interrupt mask of some type, maybe TSD (?)

24060-24078 used in Demux_UpdatePCR

240a4 used in Demux_commandTableWrite

247e8 plus some offset is used in SetChannelWritePtr

24be8 plus some offset is used in SetPesChannelWritePtr

24d68.. used in InitPSI

25718-25728,25750,25754 used in _auxLdDscMbox (called in VopLoadDescriptor)

25728 is auxTstDscrMboxEmpty

2573c is auxTstCurLineCnt

25740 used in _auxEnable/DisableDscInt, may be an interrupt mask

25744 used in auxSetAuxReset

25768-257e8 Demux command table?

26800 and 26804 used in Demux_stop and demux_init

27810 written with _setValue in Demux_UpdatePCR

27814 last queued tsd interrupt

MIF 28000, 28020-280dc

280dc written with 0x31415926 in cJanus::RestartMce


Some of the values sometimes written to a few registers:
00000004 0000009B
00001010 00000100
00001010 00000102
00001010 00000302
00001010 00000304
00001010 00000504
00001010 00000506
00001010 00000700
00001010 00000706
00007000 00000015
00007000 007DE310
0000700C 09080700
0000701C 00000090
0000701C 00000092
0000701C 03E07C90
0000701C 03E07C92
0000701C 07C0F892
0000701C 0F81F090
0000701C 0F81F092
0000702C 00000000
0000702C 80000000
00010000 00000032
00010000 00000033
00010048 00C00098
00010048 00C000BA
00025718 00001F54
0002571C 0000A280
00025720 0000A000
00025724 0000A000
00025728 0000000C
00025758 0000FF14


The OSD addresses all get OR'd with 0x52300000.


